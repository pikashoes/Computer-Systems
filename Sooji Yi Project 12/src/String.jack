// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String
{
    field Array chars;
    field int len, maxLen;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength)
    {
        if (maxLength = 0)
        {
            let maxLength = 1;
        }

        let chars = Array.new(maxLength);
        let maxLen = maxLength;
        let len = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose()
    {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this String. */
    method int length() 
    {
        return len;
    }

    /** Returns the character at location j. */
    method char charAt(int j)
    {
        return chars[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c)
    {
        let chars[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c)
    {
        if (len < maxLen)
        {
            let chars[len] = c;
            let len = len + 1;
        }

        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() 
    {
        if (len > 0)
        {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue()
    {
        var int value, index;
        var boolean neg;

        let value = 0;
        if ((len > 0) & (chars[0] = 45))
        {
            let neg = true;
            let index = 1;
        }

        else
        {
            let neg = false;
            let index = 0;
        }

        while ((index < len) & (chars[index] < 58) & (chars[index] > 47))
        {
            let value = (value * 10) + (chars[index] - 48);
            let index = index + 1;
        }

        if (neg)
        {
            return -value;
        }

        else
        {
            return value;
        }
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number)
    {
        let len = 0; // Clear the string

        if (number < 0)
        {
            let number = -number;
            do appendChar(45);
        }

        do setIntRec(number);
        return;
    }

    method void setIntRec(int x)
    {
        var int num;
        if (x < 10)
        {
            do appendChar(x + 48);
        }

        else
        {
            let num = x / 10;
            do setIntRec(num);
            do appendChar(x - (num * 10) + 48);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine()
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace()
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote()
    {
        return 34;
    }
}
