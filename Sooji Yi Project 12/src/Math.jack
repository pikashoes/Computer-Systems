// Math library

class Math
{
	static Array binaryArray; // Array of 2 to the array index number

	/** Initializing math library. For internal use only. */
	function void init()
	{
		var int i, value;

		let binaryArray = Array.new(16);
		let i = 0;
		let value = 1;

		while (i < 16)
		{
			let binaryArray[i] = value;
			let i = i + 1;
			let value = value + value;
		}
		return;
	}

	/** Returns true if jth bit of x is 1 */
    function boolean bit(int x, int j)
    {
        return ~((x & binaryArray[j]) = 0);
    }

	/** Returns the absolute value of x */
	function int abs(int x)
	{
		if (x < 0)
		{
            let x = -x;
        }
        return x;
	}

	/** Returns the product of x and y */
	function int multiply(int x, int y)
	{
		var int sum, shiftedX, j;

		let sum = 0;
		let shiftedX = x;
		let j = 0;

		while (j < 16)
		{
			if (Math.bit(y, j)) // If the jth's bit of y is 1
			{
				let sum = sum + shiftedX;
			}

			let shiftedX = shiftedX + shiftedX;
			let j = j + 1;
		}

		return sum;

	}

	/** Returns the integer part of x/y */
	function int divide(int x, int y)
	{
		var int z, result;
        var boolean pos;

        if (y = 0)
        {
        	do Sys.error(3);
        }

        let pos = ((x < 0) = (y < 0)); // true if both are false or true

        let x = Math.abs(x); // Make positive
        let y = Math.abs(y); // Make positive

        if (y > x)
        {
            return 0; // A fraction will return 0.
        }

        let z = Math.divide(x, y + y);
        
        if ((x - ((z + z) * y)) < y)
        {
            let result = z + z;
        }

        else
        {
            let result = z + z + 1;
        }

        if (pos)
        {
            return result;
        }

        else
        {
            return -result;
        }
	}

	/** Returns the minimum of x and y */
	function int min(int x, int y)
	{
		if (x < y)
		{
			return x;
		}

		return y;
	}

	/** Returns the maximum of x and y */
	function int max(int x, int y)
	{
		if (x > y)
		{
			return x;
		}

		return y;
	}

	/** Returns the integer part of the square root of x */
	function int sqrt(int x)
	{
		var int result, j, y, temp;

		if (x < 0)
		{
			do Sys.error(4);
		}

		let result = 0;
		let j = 7;

		while (~(j < 0))
		{
			let y = result + binaryArray[j];
			let temp = y * y;
			if ((~(temp > x)) & (temp > 0))
			{
				let result = y;
			}

			let j = j - 1;
		}
		
		return y;
	}

	/** For screen */
	function int powerTwo(int i)
	{
		return binaryArray[i];
	}
}